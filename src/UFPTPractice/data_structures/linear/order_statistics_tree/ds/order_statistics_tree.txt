Two related problems
  Selection problem
    Find the k-th smallest element of an array
    Also called order statistics
    minimum element is 1-st order statistic, max is n-th order
  Ranking problem
    opposite of Selection
    select(k) = v means rank(v) = k

Static Data 
  Special Cases: k = 1, k = n 
    Searching for the minimum or maximum
    Can be done in n-1 comparisons
    Start with the first, keep comparing
  
  O(n^2)
    Naive algorithm
    Find the smallest item, discard it.
    Keep doing this k times

  O(nlogn)
    Simply sort
    Then return the (k-1)-th item
  
  O(n)
    Divide and Conquer - Quick Sort partition algorithm O(n)
    Partition at a random point
    If the partition ends up at k, return the partition
    if below, partition on the lower array
    if above, partition on the upper array

  Library Solution
    nth_element in <algorithm>
    May move elements in the original array

Dynamic Data
  O(nlogn) preprocessing, O(logn) usin bBST
    First insert all n elements into a bBST in O(nlogn)
    Add information about the size of each sub-tree to query the size of a subtree in O(1)
    
    Compare k with q (the size of the left sub-tree of the root)
    if q+1 == k, root is the answer
    if q+1 > k, left subtree
    if q+1 < k, searching for k-q-1 now

    Rank is now a binary search as well

  Also can be done with a Fenwick Tree or pbds solution.

Policy Based Data Structure

  #include <bits/extc++.h>                         // pbds
  using namespace __gnu_pbds;
  typedef tree<int, null_type, less<int>, rb_tree_tag,
              tree_order_statistics_node_update> ost;

  int main() {
    int n = 9;
    int A[] = { 2, 4, 7,10,15,23,50,65,71};        // as in Chapter 2
    ost tree;
    for (int i = 0; i < n; ++i)                    // O(n log n)
      tree.insert(A[i]);
    // O(log n) select
    cout << *tree.find_by_order(0) << "\n";        // 1-smallest = 2
    cout << *tree.find_by_order(n-1) << "\n";      // 9-smallest/largest = 71
    cout << *tree.find_by_order(4) << "\n";        // 5-smallest = 15
    // O(log n) rank
    cout << tree.order_of_key(2) << "\n";          // index 0 (rank 1)
    cout << tree.order_of_key(71) << "\n";         // index 8 (rank 9)
    cout << tree.order_of_key(15) << "\n";         // index 4 (rank 5)
    return 0;
  }

  Kind-of extreme.
